import jsPDF from 'jspdf';

interface Message {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: Date;
  services?: string[];
}

export const generateConversationPDF = (messages: Message[]): void => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  
  let yPosition = margin;
  const lineHeight = 7;
  const sectionSpacing = 15;
  
  // Header
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('TaxBot Conversation', margin, yPosition);
  yPosition += 10;
  
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}`, margin, yPosition);
  yPosition += sectionSpacing;
  
  // Add a line separator
  pdf.setDrawColor(200, 200, 200);
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += sectionSpacing;
  
  messages.forEach((message, index) => {
    // Check if we need a new page
    if (yPosition > pageHeight - 40) {
      pdf.addPage();
      yPosition = margin;
    }
    
    // Message header
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    
    if (message.isUser) {
      pdf.setTextColor(43, 107, 230); // Primary blue
      pdf.text('You:', margin, yPosition);
    } else {
      pdf.setTextColor(26, 32, 44); // Secondary dark
      pdf.text('TaxBot:', margin, yPosition);
    }
    
    yPosition += lineHeight + 2;
    
    // Timestamp
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(160, 174, 192);
    pdf.text(message.timestamp.toLocaleString(), margin, yPosition);
    yPosition += lineHeight;
    
    // Services (if any)
    if (message.services && message.services.length > 0) {
      pdf.setFontSize(8);
      pdf.setTextColor(107, 114, 128);
      const servicesText = `Services: ${message.services.join(', ')}`;
      pdf.text(servicesText, margin, yPosition);
      yPosition += lineHeight;
    }
    
    yPosition += 3;
    
    // Message content
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(0, 0, 0);
    
    const lines = pdf.splitTextToSize(message.content, maxWidth);
    
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - 30) {
        pdf.addPage();
        yPosition = margin;
      }
      pdf.text(line, margin, yPosition);
      yPosition += lineHeight;
    });
    
    // Add spacing between messages
    yPosition += sectionSpacing;
    
    // Add a subtle separator line between messages (except for the last one)
    if (index < messages.length - 1) {
      pdf.setDrawColor(240, 240, 240);
      pdf.line(margin, yPosition - 8, pageWidth - margin, yPosition - 8);
    }
  });
  
  // Footer on last page
  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(160, 174, 192);
    pdf.text(
      `Page ${i} of ${totalPages} â€¢ Generated by TaxBot AI Assistant`,
      margin,
      pageHeight - 10
    );
  }
  
  // Generate filename with timestamp
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const filename = `taxbot-conversation-${timestamp}.pdf`;
  
  // Download the PDF
  pdf.save(filename);
};